name: Release Joepardy

on:
  push:
    branches: [main]
    paths: [pyproject.toml]

jobs:

  # Tag the API and schema based on version specified in their files
  tag:
    runs-on: ubuntu-latest
    outputs:
      api_release: ${{ steps.api.outputs.release }}
      api_version: ${{ steps.api.outputs.version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          ref: ${{github.head_ref}}
          lfs: false
          persist-credentials: false

      - name: Configure git
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          git config --global user.name "Joepardy Bot (GitHub Actions)"
          git config --global user.email "joenudell+joepardybot@gmail.com"
          git config http.extraHeader "Authorization: Basic $(echo -n $GITHUB_TOKEN | base64)"
          git fetch --tags

      - name: Tag API based on pyproject.toml version
        id: api
        run: |
          API_VERSION=$(cat pyproject.toml | grep '^version' | awk '{print$3}' | sed 's/"//g')
          echo "version=$API_VERSION" >> "$GITHUB_OUTPUT"

          if git rev-parse "$API_VERSION" >/dev/null 2>&1; then
            echo "Tag $API_VERSION already exists"
            echo "release=false" >> "$GITHUB_OUTPUT"
          else
            git tag -a "$API_VERSION" -m "[auto] API version $API_VERSION"
            echo "Tagged $API_VERSION"
            echo "release=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Push tags
        run: git push origin main --tags


  # Create Docker image and push to container registry
  docker:
    needs: [tag]
    if: needs.tag.outputs.api_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          ref: ${{github.head_ref}}
          lfs: false
          persist-credentials: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to private registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: jnu
          password: ${{ secrets.GH_PAT }}

      - name: Build and push API image
        uses: docker/build-push-action@v6
        with:
          # Apply new version tag and replace any existing `latest` tag.
          push: true
          tags: ghcr.io/jnu/joepardy:latest,ghcr.io/jnu/joepardy:${{ needs.tag.outputs.api_version }}

  # Create GitHub release with notes
  release:
    needs: [tag, docker]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          ref: ${{github.head_ref}}
          lfs: false
          persist-credentials: false

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          name: v${{ needs.tag.outputs.api_version }}
          tag_name: ${{ needs.tag.outputs.api_version }}
          prerelease: false
          make_latest: true
          generate_release_notes: true
